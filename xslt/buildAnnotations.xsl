<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:math="http://www.w3.org/2005/xpath-functions/math"
    xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl"
    xmlns:mei="http://www.music-encoding.org/ns/mei"
    exclude-result-prefixes="xs math xd mei"
    version="3.0">
    <xd:doc scope="stylesheet">
        <xd:desc>
            <xd:p><xd:b>Created on:</xd:b> May 10, 2016</xd:p>
            <xd:p><xd:b>Author:</xd:b> Johannes Kepper</xd:p>
            <xd:p><xd:b>License:</xd:b> AGPL3.0</xd:p>
            <xd:p>This stylesheet is used to extract editorial annotations from freidi-work.xml
                into freidi-music-annotations.xml, so that Edirom Online can handle them properly.
                It is operated on freidi-work.xml.</xd:p>
        </xd:desc>
    </xd:doc>
    
    <xsl:output method="xml" indent="yes"/>
    
    <xsl:template match="/">
        <xsl:if test="not(/mei:mei[@xml:id = 'freidi-work'])">
            <xsl:message terminate="yes" select="'ERROR: This xslt must be run on freidi-work.xml.'"/>
        </xsl:if>
        
        <xsl:variable name="doc.uri" select="substring-before(string(document-uri()),'freidi-work.xml')" as="xs:string"/>
        
        <xsl:result-document href="{concat($doc.uri,'ready-for-use/freidi-music-annotations.xml')}">
            <xsl:apply-templates/>
        </xsl:result-document>
        
    </xsl:template>
    
    <xsl:template match="mei:mei">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:comment>
                Attention: This file has been generated by buildAnnotations.xsl on <xsl:value-of select="current-dateTime()"/>.
                Do not change this file manually, but instead change the original file and re-run the XSLT. The original file is
                freidi-work.xml, version <xsl:value-of select="//mei:identifier[@type = 'FreiDi.internal.version']/@n"/> 
                (<xsl:value-of select="//mei:identifier[@type = 'FreiDi.internal.version']/parent::mei:edition/mei:date/@isodate"/>).
            </xsl:comment>
            <xsl:apply-templates select="node()"/>
        </xsl:copy>
    </xsl:template>
    
    <xsl:template match="mei:fileDesc/mei:titleStmt">
        <xsl:copy>
            <title xmlns="http://www.music-encoding.org/ns/mei">Musikalische Einzelanmerkungen</title>
            <editor xmlns="http://www.music-encoding.org/ns/mei">Johannes Kepper</editor>
            <editor xmlns="http://www.music-encoding.org/ns/mei">Joachim Veit</editor>
            <xsl:apply-templates select="mei:respStmt"/>
        </xsl:copy>
    </xsl:template>
    
    <xsl:template match="mei:expressionList"/>
    <xsl:template match="mei:componentGrp"/>
    
    <xsl:template match="mei:annot[@type = 'criticalCommentary']">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:apply-templates select="//mei:annot[@type = 'editorialComment']" mode="adjust.annot"/>
        </xsl:copy>
    </xsl:template>
    
    <xsl:template match="mei:annot/@plist" mode="adjust.annot">
        <xsl:variable name="tokens" select="tokenize(string(.),' ')" as="xs:string+"/>
        
        <xsl:variable name="sources" select="ancestor::mei:annot/tokenize(@source,' ')" as="xs:string+"/>
        
        <xsl:variable name="links" as="xs:string+">
            <xsl:for-each select="$tokens">
                <xsl:variable name="current.token" select="replace(.,'#core','')" as="xs:string"/>
                <xsl:for-each select="$sources">
                    <xsl:variable name="current.source" select="replace(.,'#','')" as="xs:string"/>
                    <xsl:value-of select="'xmldb:exist:///db/apps/contents/musicSources/freidi-musicSource_' || $current.source || '.xml#' || $current.source || $current.token"/>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:variable>
        
        <xsl:attribute name="plist" select="string-join($links,' ')"/>
        
    </xsl:template>
    
    <xsl:template match="mei:music">
        <xsl:copy/>
    </xsl:template>
    
    <xsl:template match="node() | @*" mode="#all">
        <xsl:copy>
            <xsl:apply-templates select="node() | @*" mode="#current"/>
        </xsl:copy>
    </xsl:template>
    
</xsl:stylesheet>
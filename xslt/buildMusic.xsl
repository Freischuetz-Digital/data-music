<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:math="http://www.w3.org/2005/xpath-functions/math"
    xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl"
    xmlns:mei="http://www.music-encoding.org/ns/mei"
    exclude-result-prefixes="xs math xd mei"
    version="3.0">
    <xd:doc scope="stylesheet">
        <xd:desc>
            <xd:p><xd:b>Created on:</xd:b> Oct 19, 2015</xd:p>
            <xd:p><xd:b>Author:</xd:b> Johannes Kepper</xd:p>
            <xd:p><xd:b>License:</xd:b> AGPL3.0</xd:p>
            <xd:p>This stylesheet is used to extract "usable" MEI data from the Freisch√ºtz Digital Core Model. 
                It operates on the individual source files and requires freidi-work.xml to reside in the folder
                above. If run on source A, it will also generate core files for each movement.</xd:p>
        </xd:desc>
    </xd:doc>
    
    <xsl:output method="xml" indent="yes"/>
    
    <xsl:variable name="source.id" select="//mei:mei/@xml:id" as="xs:string"/>
    
    <xsl:variable name="doc.uri" select="substring-before(string(document-uri()),'musicSources/freidi-musicSource')" as="xs:string"/>
    
    <xsl:variable name="core" select="doc(concat($doc.uri,'freidi-work.xml'))" as="node()?"/>
    
    <xsl:template match="/">
        
        <xsl:choose>
            <xsl:when test="not($core)">
                <xsl:message select="'Could not open core file. Please check path!'"/>
                <error>Core file could not be found</error>
            </xsl:when>
            <xsl:otherwise>
                
                <xsl:for-each select="//mei:mdiv[.//mei:note]">
                
                    <xsl:variable name="mdiv" select="." as="node()"/>
                    <xsl:variable name="mdiv.n" select="substring-after(@xml:id,'_mov')" as="xs:string"/>
                    
                    <xsl:variable name="filled.up">
                        <xsl:apply-templates select="//mei:mei" mode="query.core">
                            <xsl:with-param name="mdiv.n" select="$mdiv.n" tunnel="yes" as="xs:string"/>
                        </xsl:apply-templates>    
                    </xsl:variable>
                    
                    <xsl:variable name="abbr" as="node()">
                        <xsl:apply-templates select="$filled.up" mode="get.abbr"/>
                    </xsl:variable>
                    
                    <xsl:variable name="expan" as="node()">
                        <xsl:apply-templates select="$filled.up" mode="get.expan"/>
                    </xsl:variable>
                    
                    <xsl:result-document href="{concat($doc.uri,'ready-for-use/source_abbr/',$source.id,'/',$source.id,'_mov',$mdiv.n,'.xml')}">
                        <xsl:copy-of select="$abbr"/>
                    </xsl:result-document>
                    <xsl:result-document href="{concat($doc.uri,'ready-for-use/source_expan/',$source.id,'/',$source.id,'_mov',$mdiv.n,'.xml')}">
                        <xsl:copy-of select="$expan"/>
                    </xsl:result-document>
                    <xsl:result-document href="{concat($doc.uri,'ready-for-use/source_raw/',$source.id,'/',$source.id,'_mov',$mdiv.n,'.xml')}">
                        <xsl:apply-templates select="$filled.up" mode="get.raw"/>
                    </xsl:result-document>
                    
                    <xsl:if test="$source.id = 'A'">
                        <xsl:result-document href="{concat($doc.uri,'ready-for-use/core/core_mov',$mdiv.n,'.xml')}">
                            <xsl:apply-templates select="$core//mei:mei" mode="query.core">
                                <xsl:with-param name="mdiv.n" select="$mdiv.n" tunnel="yes" as="xs:string"/>
                            </xsl:apply-templates>
                        </xsl:result-document>
                    </xsl:if>
                
                </xsl:for-each>
                
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <xsl:template match="mei:mei" mode="query.core">
        <xsl:copy>
            <xsl:apply-templates select="@*" mode="#current"/>
            <xsl:comment>
                Attention: This file has been generated by buildMusic.xsl on <xsl:value-of select="current-dateTime()"/>.
                Do not change this file manually, but instead change the original files and re-run the XSLT. The original file is
                freidi-work.xml, version <xsl:value-of select="$core//mei:identifier[@type = 'FreiDi.internal.version']/@n"/> 
                (<xsl:value-of select="$core//mei:identifier[@type = 'FreiDi.internal.version']/parent::mei:edition/mei:date/@isodate"/>).
            </xsl:comment>
            <xsl:apply-templates select="mei:*" mode="#current"/>
        </xsl:copy>
    </xsl:template>
    
    <xsl:template match="mei:mei" mode="get.abbr">
        <xsl:copy>
            <xsl:apply-templates select="@*" mode="#current"/>
            <xsl:comment>
                Attention: This file has been generated by buildMusic.xsl on <xsl:value-of select="current-dateTime()"/>.
                Do not change this file manually, but instead change the original files and re-run the XSLT. The original file is
                freidi-musicSource_<xsl:value-of select="@xml:id"/>.xml, version <xsl:value-of select=".//mei:identifier[@type = 'FreiDi.internal.version']/@n"/> 
                (<xsl:value-of select=".//mei:identifier[@type = 'FreiDi.internal.version']/parent::mei:edition/mei:date/@isodate"/>).
                This file is also based on freidi-work.xml, version <xsl:value-of select="$core//mei:identifier[@type = 'FreiDi.internal.version']/@n"/> 
                (<xsl:value-of select="$core//mei:identifier[@type = 'FreiDi.internal.version']/parent::mei:edition/mei:date/@isodate"/>).
            </xsl:comment>
            <xsl:apply-templates select="mei:*" mode="#current"/>
        </xsl:copy>
    </xsl:template>
    
    <xsl:template match="mei:mei" mode="get.expan">
        <xsl:copy>
            <xsl:apply-templates select="@*" mode="#current"/>
            <xsl:comment>
                Attention: This file has been generated by buildMusic.xsl on <xsl:value-of select="current-dateTime()"/>.
                Do not change this file manually, but instead change the original files and re-run the XSLT. The original file is
                freidi-musicSource_<xsl:value-of select="@xml:id"/>.xml, version <xsl:value-of select=".//mei:identifier[@type = 'FreiDi.internal.version']/@n"/> 
                (<xsl:value-of select=".//mei:identifier[@type = 'FreiDi.internal.version']/parent::mei:edition/mei:date/@isodate"/>).
                This file is also based on freidi-work.xml, version <xsl:value-of select="$core//mei:identifier[@type = 'FreiDi.internal.version']/@n"/> 
                (<xsl:value-of select="$core//mei:identifier[@type = 'FreiDi.internal.version']/parent::mei:edition/mei:date/@isodate"/>).
            </xsl:comment>
            <xsl:apply-templates select="mei:*" mode="#current"/>
        </xsl:copy>
    </xsl:template>
    
    <xsl:template match="mei:mei" mode="get.raw">
        <xsl:copy>
            <xsl:apply-templates select="@*" mode="#current"/>
            <xsl:comment>
                Attention: This file has been generated by buildMusic.xsl on <xsl:value-of select="current-dateTime()"/>.
                Do not change this file manually, but instead change the original files and re-run the XSLT. The original file is
                freidi-musicSource_<xsl:value-of select="@xml:id"/>.xml, version <xsl:value-of select=".//mei:identifier[@type = 'FreiDi.internal.version']/@n"/> 
                (<xsl:value-of select=".//mei:identifier[@type = 'FreiDi.internal.version']/parent::mei:edition/mei:date/@isodate"/>).
                This file is also based onfreidi-work.xml, version <xsl:value-of select="$core//mei:identifier[@type = 'FreiDi.internal.version']/@n"/> 
                (<xsl:value-of select="$core//mei:identifier[@type = 'FreiDi.internal.version']/parent::mei:edition/mei:date/@isodate"/>).
            </xsl:comment>
            <xsl:apply-templates select="mei:*" mode="#current"/>
        </xsl:copy>
    </xsl:template>
    
    <xsl:template match="mei:*[@sameas and not(local-name() = ('beam','layer','tuplet','lb'))]" mode="query.core">
        <xsl:param name="mdiv.n" tunnel="yes" as="xs:string"/>
        <xsl:variable name="core.id" select="substring-after(@sameas,'#')" as="xs:string"/>
        <xsl:variable name="core.elem" select="$core/id($core.id)" as="node()?"/>
        <xsl:if test="not($core.elem)">
            <xsl:message select="concat('WARNING (' , $source.id ,'_mov', $mdiv.n, '): reference to ',$core.id,' from ' , ancestor::mei:staff/@xml:id ,', layer ', string(ancestor::mei:layer/count(preceding-sibling::mei:layer) + 1),' in core is broken. Pointing ', local-name() ,': ',@xml:id)"/>
        </xsl:if>
        <xsl:copy>
            <xsl:apply-templates select="@* except @sameas" mode="#current"/>
            <xsl:choose>
                <xsl:when test="parent::mei:chord">
                    <xsl:apply-templates select="$core.elem/(@* except (@xml:id,@dur,@startid,@endid))" mode="#current"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:apply-templates select="$core.elem/(@* except (@xml:id, @startid,@endid))" mode="#current"/>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:apply-templates select="node()" mode="#current"/>
        </xsl:copy>
        
    </xsl:template>
    
    <xsl:template match="mei:chord[not(@dur) and not(@sameas) and not(ancestor::mei:orig) and not(ancestor::mei:sic)]" mode="query.core">
        
        <xsl:variable name="sameas" select="(.//@sameas)[1]" as="xs:string"/>
        <xsl:variable name="core.elem" select="$core/id(substring-after($sameas,'#'))" as="node()?"/>
        <xsl:if test="not($core.elem)">
            <xsl:message terminate="yes" select="'ERROR: @xml:id=' || @xml:id || ' - @sameas=' || $sameas"/>
        </xsl:if>
        <!--
        <xsl:if test="not($child.core.elem)">
            <xsl:message select="'ERROR: unable ' || substring-after((.//@sameas)[1],'#') || ' to determine duration of chord ' || @xml:id"/>
        </xsl:if>
        <xsl:if test="count($child.core.elem) gt 1">
            <xsl:message select="'ERROR: multiple elements with id ' || substring-after((.//@sameas)[1],'#') || ' in core'"/>
        </xsl:if>-->
        <xsl:copy>
            <xsl:apply-templates select="@*" mode="#current"/>
            <xsl:apply-templates select="$core.elem[1]/ancestor-or-self::mei:*[@dur][1]/(@dur|@dots)" mode="#current"/>
            <xsl:apply-templates select="node()" mode="#current"/>
        </xsl:copy>
    </xsl:template>
    
    <xsl:template match="mei:choice" mode="get.abbr">
        <xsl:choose>
            <xsl:when test="child::mei:corr">
                <xsl:apply-templates select="child::mei:corr[1]/mei:*" mode="#current"/>
            </xsl:when>
            <xsl:when test="child::mei:abbr">
                <xsl:apply-templates select="child::mei:abbr/mei:*" mode="#current"/>
            </xsl:when>
            <xsl:when test="child::mei:orig and (child::mei:orig/child::mei:fTrem or child::mei:orig/child::mei:bTrem)">
                <xsl:apply-templates select="child::mei:orig/mei:*" mode="#current"/>
            </xsl:when>
            <xsl:when test="child::mei:orig"><!-- slurs etc. ‚Äì¬†render only the first -->
                <xsl:apply-templates select="child::mei:reg[1]/mei:*" mode="#current"/>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
    
    <xsl:template match="mei:choice" mode="get.expan">
        <xsl:choose>
            <xsl:when test="child::mei:corr">
                <xsl:apply-templates select="child::mei:corr[1]/mei:*" mode="#current"/>
            </xsl:when>
            <xsl:when test="child::mei:expan">
                <xsl:apply-templates select="child::mei:expan/mei:*" mode="#current"/>
            </xsl:when>
            <xsl:when test="child::mei:orig and (child::mei:orig/child::mei:fTrem or child::mei:orig/child::mei:bTrem)">
                <xsl:apply-templates select="child::mei:orig/mei:*" mode="#current"/>
            </xsl:when>
            <xsl:when test="child::mei:orig"><!-- slurs etc. ‚Äì¬†render only the first -->
                <xsl:apply-templates select="child::mei:reg[1]/mei:*" mode="#current"/>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
    
    <xsl:template match="mei:layer" mode="get.abbr get.expan">
        <xsl:copy>
            <xsl:apply-templates select="@*" mode="#current"/>
            <xsl:choose>
                <xsl:when test=".//mei:note[not(ancestor-or-self::mei:*/@dur)]">
                    <mSpace xmlns="http://www.music-encoding.org/ns/mei"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:apply-templates select="node()" mode="#current"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:copy>
    </xsl:template>
    
    <xsl:template match="mei:body" mode="query.core">
        <xsl:param name="mdiv.n" tunnel="yes" as="xs:string"/>
        <xsl:copy>
            <xsl:apply-templates select="mei:mdiv[ends-with(@xml:id, '_mov' || $mdiv.n)]" mode="#current"/>
        </xsl:copy>
    </xsl:template>
    
    <xsl:template match="mei:facsimile" mode="query.core">
        <xsl:param name="mdiv.n" tunnel="yes" as="xs:string"/>
        <xsl:variable name="surfaces" select="mei:surface[mei:zone[contains(@xml:id,concat('_zoneOf_mov',$mdiv.n,'_measure'))]]" as="node()+"/>
        <xsl:copy>
            <xsl:apply-templates select="$surfaces" mode="#current"/>
        </xsl:copy>
        <xsl:message select="'INFO: ' || $source.id || '_mov' || $mdiv.n || ' uses surfaces ' || string(min($surfaces/number(@n))) || ' to ' || string(max($surfaces/number(@n))) || '.'"/>
    </xsl:template>
    
    <xsl:template match="@xml:id" mode="query.core">
        <xsl:choose>
            <xsl:when test="contains(.,' ')">
                <xsl:attribute name="xml:id" select="substring-before(.,' ')"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:next-match/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
    <xsl:template match="mei:note[parent::mei:bTrem or parent::mei:fTrem]" priority="1" mode="query.core">
        <xsl:copy>
            <xsl:apply-templates select="node() | @* | parent::mei:*/@dur" mode="#current"/>
        </xsl:copy>
    </xsl:template>
    
    <xsl:template match="mei:chord[parent::mei:bTrem or parent::mei:fTrem]" priority="1" mode="query.core">
        <xsl:copy>
            <xsl:apply-templates select="node() | @* | parent::mei:*/@dur" mode="#current"/>
        </xsl:copy>
    </xsl:template>
    
    <!--<xsl:template match="mei:meiHead" mode="query.core"/>-->
    <xsl:template match="mei:facsimile" mode="get.abbr get.expan"/>
    
    <xsl:template match="node() | @*" mode="#all">
        <xsl:copy>
            <xsl:apply-templates select="node() | @*" mode="#current"/>
        </xsl:copy>
    </xsl:template>
    
</xsl:stylesheet>